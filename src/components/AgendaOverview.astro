---
import clsx from "clsx";
import AgendaIntermission from "../components/AgendaIntermission.astro";
import type { AgendaEventType } from "../types";
import EventCard from "./EventCard.astro";
import { randomize } from "../utils";

import { t } from "i18next";

type Props = {
  events: [string, AgendaEventType[]][];
  isSpeakerPage?: boolean;
};

const { events, isSpeakerPage } = Astro.props;
---

{
  events.map(([schedule, _events]) => {
    const hasMultipleEvents = _events.length > 1;

    return (
      <div class={clsx("flex my-8 relative", { "mb-16": hasMultipleEvents })}>
        <div class="flex flex-col md:flex-row w-full gap-3 md:gap-6">
          <div class="h-20 w-20 md:h-40 md:w-40 rounded-3xl shrink-0 bg-[#232323] text-center flex mx-2 md:mx-0">
            <div class="h-min m-auto">
              <span class="text-2xl md:text-4xl font-black">
                {schedule.split(":")[0]}
              </span>
              <span class="text-xl md:text-2xl">:{schedule.split(":")[1]}</span>
            </div>
          </div>
          <div
            class={clsx(
              "md:p-0 w-full inline-block overflow-hidden md:rounded-3xl md:bg-[#232323]",
              {
                splide: hasMultipleEvents,
              },
            )}
            aria-label={hasMultipleEvents ? t("agenda:carousel-label", {time: schedule}) : null}
          >
            <div class={clsx({ splide__track: hasMultipleEvents })}>
              <div
                class={clsx({
                  "hidden md:block w-[10%] h-full bg-gradient-to-r from-transparent to-[#232323] absolute top-0 right-0 z-10 rounded-r-3xl":
                    hasMultipleEvents,
                })}
              />

              <ul class="splide__list">
                {randomize(_events).map((event) => {
                  if (event.type === "intermission") {
                    return (
                      <AgendaIntermission
                        name={event.name}
                        length={event.length}
                      />
                    );
                  }

                  return (
                    <EventCard
                      isSpeakerPage={isSpeakerPage}
                      name={event.name}
                      length={event.length}
                      language={event.language}
                      room={event.room}
                      tags={event.tags}
                      speaker={event.speaker}
                      multiple={hasMultipleEvents}
                    >
                      <event.Abstract.Content />
                    </EventCard>
                  );
                })}
              </ul>
            </div>
            {hasMultipleEvents && (
              <>
                <div class="flex md:mx-6 md:pb-5">
                  <div class="splide__arrows hidden md:block rounded-xl bg-[#323232] divide-x divide-dashed p-1 py-3">
                    <button
                      aria-label="Prev"
                      class="splide__arrow--prev  p-2 px-4 text-2xl"
                    >
                      <svg
                        width="10"
                        height="13"
                        viewBox="0 0 10 13"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M8.75 7.16406L3.4375 12.4766C3.04688 12.8672 2.46094 12.8672 2.10938 12.4766L1.21094 11.6172C0.859375 11.2266 0.859375 10.6406 1.21094 10.2891L5 6.53906L1.21094 2.75C0.859375 2.39844 0.859375 1.8125 1.21094 1.42188L2.10938 0.523438C2.46094 0.171875 3.04688 0.171875 3.4375 0.523438L8.75 5.83594C9.10156 6.22656 9.10156 6.8125 8.75 7.16406Z"
                          fill="white"
                        />
                      </svg>
                    </button>
                    <button
                      aria-label="Next"
                      class="splide__arrow--next  p-2 px-4 text-2xl"
                    >
                      <svg
                        width="10"
                        height="13"
                        viewBox="0 0 10 13"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M8.75 7.16406L3.4375 12.4766C3.04688 12.8672 2.46094 12.8672 2.10938 12.4766L1.21094 11.6172C0.859375 11.2266 0.859375 10.6406 1.21094 10.2891L5 6.53906L1.21094 2.75C0.859375 2.39844 0.859375 1.8125 1.21094 1.42188L2.10938 0.523438C2.46094 0.171875 3.04688 0.171875 3.4375 0.523438L8.75 5.83594C9.10156 6.22656 9.10156 6.8125 8.75 7.16406Z"
                          fill="white"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
                <ul class="splide__pagination md:hidden" />
              </>
            )}
          </div>
        </div>
      </div>
    );
  })
}

{
  events.length === 0 && (
    <div class="flex flex-col items-center justify-center h-full">
      <div class="text-center py-16">
        <h2 class="text-2xl font-bold mb-4">{t("agenda:no-events-found")}</h2>
      </div>
    </div>
  )
}

<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/dist/css/themes/splide-default.min.css";

  document.addEventListener("DOMContentLoaded", (event) => {
    const elms = document.getElementsByClassName(
      "splide",
    ) as HTMLCollectionOf<HTMLElement>;

    for (var i = 0; i < elms.length; i++) {
      const element = elms[i];
      if (element) {
        const splide = new Splide(element, {
          autoWidth: true,
          padding: { right: "10%" },
          perPage: 1,
          pagination: true,
        });

        splide.on("active", (evt) => {
          if (window.innerHeight < evt.slide.offsetHeight + 100) {
            const { x, y } = evt.slide.getBoundingClientRect();

            window.scrollTo({
              left: x,
              behavior: "smooth",
              top: y + window.scrollY - 100,
            });
          }
        });

        splide.mount();
      }
    }
  });
</script>

<style>
  [class^="splide"]:disabled svg {
    opacity: 0.3;
    cursor: not-allowed;
  }
</style>

<style is:global>
  .splide__pagination {
    gap: 0.1rem !important;
    padding: 1rem;
    position: static !important;
  }
  .splide__pagination__page {
    display: block;
    background-color: #232323 !important;
    width: 20px !important;
    height: 5px !important;
    border-radius: 3px !important;
    transform: none !important;
  }

  .splide__pagination__page.is-active {
    background-color: #f6f6f6 !important;
  }

  @media (min-width: 768px) {
    .splide__pagination {
      display: none;
    }
  }
</style>
