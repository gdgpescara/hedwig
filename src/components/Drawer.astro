---
import { t } from "i18next";
import Navbar from "./Navbar.astro";
import clsx from "clsx";
// @ts-expect-error - no types
import { localizeUrl } from "astro-i18next";
import { LanguageSelector } from "astro-i18next/components";
import { env } from "../costants";

type Props = {
  headerShouldBeDarker?: boolean;
};

const { headerShouldBeDarker } = Astro.props;
const origin = env.siteUrl;
---

<div class="drawer">
  <input id="drawer-toggle" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content overflow-x-auto flex flex-col">
    <!-- Navbar -->
    <header class="w-full navbar fixed top-0 z-50" role="banner">
      <div class="flex-none lg:hidden">
        <label for="drawer-toggle" class="btn btn-square btn-ghost">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class={clsx("hamburger inline-block w-6 h-6 ", {
              "stroke-secondary": !headerShouldBeDarker,
              "stroke-primary": headerShouldBeDarker,
            })}
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path></svg
          >
        </label>
      </div>
      <!-- Logo -->
      <div class="flex-1 grid justify-items-center lg:justify-items-start">
        <a
          class={clsx("btn normal-case text-xl logo hover:scale-105", {
            "bg-secondary hover:bg-secondary": !headerShouldBeDarker,
            "bg-primary hover:bg-primary": headerShouldBeDarker,
          })}
          href={localizeUrl(`${origin}/`)}
        >
          {t("site-title")}
        </a>
      </div>
      <nav class="flex-none hidden lg:block" role="navigation">
        <ul
          class={clsx("nav menu menu-horizontal gap-2", {
            "paint-it-black": headerShouldBeDarker,
          })}
        >
          <Navbar />
        </ul>
        <label for="language-selector" class="sr-only">{t("select-label")}</label>
        <LanguageSelector
          id="language-selector"
          showFlag={false}
          class={clsx(
            "select ml-1 select-ghost select-sm font-bold lang-selector focus:text-secondary",
            {
              "text-primary": headerShouldBeDarker,
              "text-secondary": !headerShouldBeDarker,
            }
          )}
        />
      </nav>
    </header>
    <!-- Page content here -->
    <div role="main">
      <slot />
    </div>
  </div>
  <aside class="drawer-side z-50" role="complementary">
    <label for="drawer-toggle" class="drawer-overlay"></label>
    <div class="bg-base-200 h-full flex flex-col">
      <ul class="menu p-4 w-80 gap-3 flex-1">
        <!-- Sidebar content here (a duplication on navbar) -->
        <Navbar />
      </ul>
      <div class="p-4">
        <label for="mobile-language-selector" class="sr-only">{t("select-label")}</label>
        <LanguageSelector
          id="mobile-language-selector"
          showFlag={true}
          class="select select-ghost w-full font-bold"
        />
      </div>
    </div>
  </aside>

  <style>
    header:not(.scrolled) .paint-it-black {
      & :global(.nav-item),
      :global(.nav-item a) {
        color: theme(colors.primary);
      }
    }

    header {
      .logo {
        -webkit-mask: url(/images/logo.svg) no-repeat;
        mask: url(/images/logo.svg) no-repeat;
        mask-size: contain;
        mask-position: 1rem;
        height: 80px;
        width: 250px;
        text-indent: -9999px;
      }
    }

    .scrolled {
      @apply transition-all duration-150;

      .lang-selector {
        @apply text-secondary;
      }
      .logo {
        @apply bg-secondary;
      }

      header {
        background-color: hsl(var(--b2) / var(--tw-bg-opacity));
      }

      label svg {
        color: #fff;
      }

      .hamburger {
        @apply stroke-secondary;
      }
    }

    .paint-it-black {
      .nav-items {
        background: theme(colors.primary);
      }
    }
  </style>

  <script>
    // when the scroll is greater than 0px, add a class to the header element
    window.addEventListener("scroll", function () {
      const header = document.querySelector("header");
      header?.classList.toggle("scrolled", window.scrollY > 0);
      header?.classList.toggle("bg-primary", window.scrollY > 0);
    });
  </script>
</div>
